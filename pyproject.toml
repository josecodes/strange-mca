[tool.poetry]
name = "strange-mca"
version = "0.1.0"
description = "a strange multiscale competency architecutre multi-agent system"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "strange_mca", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
langchain = "^0.2.0"
langchain-openai = "^0.1.0"
pydantic = "^2.5.2"
graphviz = "^0.20.1"
python-dotenv = "^1.0.0"
langgraph = "^0.3.2"
networkx = "^3.2.1"
matplotlib = "^3.8.2"

[tool.poetry.group.arena.dependencies]
textarena = {path = "/Users/jcortez/dev/TextArena", develop = true}
openai = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
black = "^23.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
ruff = "^0.3.0"

[tool.ruff]
# Enable pycodestyle ('E'), Pyflakes ('F'), isort ('I'), and more
select = ["E", "F", "I", "W", "N", "B", "C4", "UP", "S", "BLE", "A", "C", "T", "PT", "RET", "SIM"]
# Ignore specific rules:
# T201: Don't use print (we're using print for debugging/output in this project)
# C901: Function is too complex (would require significant refactoring)
# E501: Line too long (Black handles most of these, but some are in strings/comments)
# BLE001: Blind exception catching (would require careful refactoring)
# A002: Argument shadows builtin (would require API changes)
# F841: Local variable assigned but never used
# SIM108: Use ternary operator instead of if-else block
# RET504/RET505: Unnecessary assignment/else before return
# S101: Use of assert (we're using assert in tests, which is a common pattern in pytest)
ignore = ["T201", "C901", "E501", "BLE001", "A002", "F841", "SIM108", "RET504", "RET505", "S101"]
line-length = 100
target-version = "py39"

[tool.ruff.isort]
known-first-party = ["strange_mca"]

# Per-file ignores
[tool.ruff.per-file-ignores]
# Ignore unused imports in __init__.py files
"__init__.py" = ["F401"]
# Ignore assert usage in test files
"tests/*" = ["S101", "E402"]
# Ignore module level import not at top of file in arena files
"arena/*" = ["E402"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api" 